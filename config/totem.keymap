//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

/ {
    combos {
        compatible = "zmk,combos";

        lpar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
            timeout-ms = <30>;
        };

        rpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <30>;
        };

        lbkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 12>;
            timeout-ms = <30>;
        };

        rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        lbrc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <30>;
        };

        rbrc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <30>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 7>;
            timeout-ms = <30>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
            timeout-ms = <30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <28 29>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
            timeout-ms = <60>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            timeout-ms = <60>;
            layers = <0 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <3>;
        };

        lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <10 11>;
            timeout-ms = <60>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    behaviors {
        mt_tap_pre: mt_tap_pre {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TAP_PRE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            label = "QWERTY";
            bindings = <
                  &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y          &kp U  &kp I                           &kp O    &kp P
                  &kp A  &kp S  &kp D      &kp F  &kp G        &kp H          &kp J  &kp K                           &kp L    &kp SEMI
&mt LEFT_ALT ESC  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N          &kp M  &kp COMMA                       &kp DOT  &kp FSLH  &mt RIGHT_SHIFT SQT
                                &kp LCTRL  &mo 2  &kp SPACE    &kp BACKSPACE  &mo 3  &mt_tap_pre LEFT_WIN RIGHT_ALT
            >;
        };

        qwerty_layer_mac {
            label = "MAC";
            bindings = <
        &trans  &trans  &trans        &trans  &trans    &trans  &trans  &trans                      &trans  &trans
        &trans  &trans  &trans        &trans  &trans    &trans  &trans  &trans                      &trans  &trans
&trans  &trans  &trans  &trans        &trans  &trans    &trans  &trans  &trans                      &trans  &trans  &trans
                        &kp LEFT_GUI  &trans  &trans    &trans  &trans  &mt_tap_pre LCTRL CAPSLOCK
            >;
        };

        nav_layer {
            label = "NAVI";
            bindings = <
              &none  &kp F9     &kp F10       &kp F11      &kp LS(F11)    &kp PRINTSCREEN  &none     &kp HOME  &kp PAGE_UP    &msc SCRL_UP
              &none  &mkp LCLK  &mkp RCLK     &kp F12      &kp LS(F12)    &kp LEFT         &kp DOWN  &kp UP    &kp RIGHT      &msc SCRL_DOWN
&kp LEFT_ALT  &none  &none      &kp LA(HOME)  &kp LA(END)  &none          &mkp MB4         &mkp MB5  &kp END   &kp PAGE_DOWN  &kp PAUSE_BREAK  &kp RIGHT_SHIFT
                                &trans        &trans       &trans         &kp DELETE       &trans    &trans
            >;
        };

        num_layer {
            label = "NUMBER";
            bindings = <
              &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6   &kp N7   &kp N8     &kp N9     &kp N0
              &kp F1  &kp F2  &kp F3  &kp F4  &kp F5     &kp F11  &kp F12  &kp MINUS  &kp EQUAL  &kp BACKSLASH
&kp LEFT_ALT  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10    &none    &none    &kp COMMA  &kp DOT    &kp PAUSE_BREAK  &kp RIGHT_SHIFT
                              &trans  &trans  &trans     &trans   &trans   &trans
            >;
        };

        func_layer {
            label = "FUNCTION";
            bindings = <
       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4    &kp K_CALC       &none   &none         &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP
       &none         &none         &none         &kp LC(LA(F))  &none           &kp LS(LC(ESC))  &none   &none         &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN
&none  &none         &none         &none         &none          &none           &none            &none   &none         &none                 &kp C_MUTE         &none
                                   &tog 1        &trans         &bt BT_CLR      &trans           &trans  &out OUT_TOG
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
